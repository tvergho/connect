{"version":3,"file":"index.esm.js","sources":["../../src/transactions/index.ts"],"sourcesContent":["import { UserSession, AppConfig } from '@stacks/auth';\nimport { SECP256K1Client, TokenSigner } from 'jsontokens';\nimport {\n  ContractCallOptions,\n  ContractCallPayload,\n  ContractDeployOptions,\n  ContractDeployPayload,\n  TransactionPopup,\n  TransactionOptions,\n  STXTransferOptions,\n  STXTransferPayload,\n  TransactionPayload,\n  TransactionTypes,\n  STXTransferSponsoredOptions,\n  STXTransferRegularOptions,\n  ContractDeployRegularOptions,\n  ContractDeploySponsoredOptions,\n  ContractCallRegularOptions,\n  ContractCallSponsoredOptions,\n  SponsoredFinishedTxPayload,\n  FinishedTxPayload,\n} from '../types/transactions';\nimport {\n  serializeCV,\n  ChainID,\n  deserializeTransaction,\n  BufferReader,\n  serializePostCondition,\n  PostCondition,\n} from '@stacks/transactions';\nimport { getStacksProvider } from '../utils';\nimport { StacksTestnet } from '@stacks/network';\n\nconst getUserSession = (_userSession?: UserSession) => {\n  let userSession = _userSession;\n\n  if (!userSession) {\n    const appConfig = new AppConfig(['store_write'], document.location.href);\n    userSession = new UserSession({ appConfig });\n  }\n  return userSession;\n};\n\nconst getKeys = (_userSession?: UserSession) => {\n  const userSession = getUserSession(_userSession);\n  const privateKey = userSession.loadUserData().appPrivateKey;\n  const publicKey = SECP256K1Client.derivePublicKey(privateKey);\n\n  return { privateKey, publicKey };\n};\n\nfunction getStxAddress(options: TransactionOptions) {\n  const { stxAddress, userSession, network } = options;\n\n  if (stxAddress) return stxAddress;\n  if (!userSession || !network) return undefined;\n  const stxAddresses = userSession?.loadUserData().profile?.stxAddress;\n  const chainIdToKey = {\n    [ChainID.Mainnet]: 'mainnet',\n    [ChainID.Testnet]: 'testnet',\n  };\n  const address: string | undefined = stxAddresses?.[chainIdToKey[network.chainId]];\n  return address;\n}\n\nfunction getDefaults(options: TransactionOptions) {\n  const network = options.network || new StacksTestnet();\n  const userSession = getUserSession(options.userSession);\n  const defaults: TransactionOptions = {\n    ...options,\n    network,\n    userSession,\n  };\n  return {\n    stxAddress: getStxAddress(defaults),\n    ...defaults,\n  };\n}\n\nconst signPayload = async (payload: TransactionPayload, privateKey: string) => {\n  let { postConditions } = payload;\n  if (postConditions && typeof postConditions[0] !== 'string') {\n    postConditions = (postConditions as PostCondition[]).map(pc =>\n      serializePostCondition(pc).toString('hex')\n    );\n  }\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  return tokenSigner.signAsync({\n    ...payload,\n    postConditions,\n  } as any);\n};\n\nconst openTransactionPopup = async ({ token, options }: TransactionPopup) => {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Hiro Wallet not installed.');\n  }\n\n  try {\n    const txResponse = await provider.transactionRequest(token);\n    const { txRaw } = txResponse;\n    const txBuffer = Buffer.from(txRaw.replace(/^0x/, ''), 'hex');\n    const stacksTransaction = deserializeTransaction(new BufferReader(txBuffer));\n\n    if ('sponsored' in options && options.sponsored) {\n      options.onFinish?.({\n        ...(txResponse as SponsoredFinishedTxPayload),\n        stacksTransaction,\n      });\n      return;\n    }\n    options.onFinish?.({\n      ...(txResponse as FinishedTxPayload),\n      stacksTransaction,\n    });\n  } catch (error) {\n    console.error('[Connect] Error during transaction request', error);\n    options.onCancel?.();\n  }\n};\n\nexport const makeContractCallToken = async (options: ContractCallOptions) => {\n  const { functionArgs, appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const args: string[] = functionArgs.map(arg => {\n    if (typeof arg === 'string') {\n      return arg;\n    }\n    return serializeCV(arg).toString('hex');\n  });\n\n  const payload: ContractCallPayload = {\n    ..._options,\n    functionArgs: args,\n    txType: TransactionTypes.ContractCall,\n    publicKey,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nexport const makeContractDeployToken = async (options: ContractDeployOptions) => {\n  const { appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const payload: ContractDeployPayload = {\n    ..._options,\n    publicKey,\n    txType: TransactionTypes.ContractDeploy,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nexport const makeSTXTransferToken = async (options: STXTransferOptions) => {\n  const { amount, appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const payload: STXTransferPayload = {\n    ..._options,\n    amount: amount.toString(10),\n    publicKey,\n    txType: TransactionTypes.STXTransfer,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nasync function generateTokenAndOpenPopup<T extends TransactionOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>\n) {\n  const token = await makeTokenFn({\n    ...getDefaults(options),\n    ...options,\n  } as T);\n  return openTransactionPopup({ token, options });\n}\n\nexport function openContractCall(options: ContractCallRegularOptions): Promise<void>;\nexport function openContractCall(options: ContractCallSponsoredOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions) {\n  return generateTokenAndOpenPopup(options, makeContractCallToken);\n}\n\nexport function openContractDeploy(options: ContractDeployRegularOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeploySponsoredOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions) {\n  return generateTokenAndOpenPopup(options, makeContractDeployToken);\n}\n\nexport function openSTXTransfer(options: STXTransferRegularOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferSponsoredOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions) {\n  return generateTokenAndOpenPopup(options, makeSTXTransferToken);\n}\n"],"names":["getUserSession","_userSession","userSession","appConfig","AppConfig","document","location","href","UserSession","getKeys","privateKey","loadUserData","appPrivateKey","publicKey","SECP256K1Client","derivePublicKey","options","stxAddress","network","stxAddresses","profile","chainIdToKey","ChainID","Mainnet","Testnet","address","chainId","StacksTestnet","defaults","getStxAddress","signPayload","payload","postConditions","map","serializePostCondition","pc","toString","tokenSigner","TokenSigner","signAsync","openTransactionPopup","token","provider","getStacksProvider","Error","transactionRequest","txResponse","txRaw","txBuffer","Buffer","from","replace","stacksTransaction","deserializeTransaction","BufferReader","sponsored","onFinish","error","onCancel","makeContractCallToken","functionArgs","appDetails","_options","args","arg","serializeCV","txType","TransactionTypes","ContractCall","makeContractDeployToken","ContractDeploy","makeSTXTransferToken","amount","STXTransfer","makeTokenFn","getDefaults","generateTokenAndOpenPopup"],"mappings":"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"}