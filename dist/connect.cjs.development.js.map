{"version":3,"file":"connect.cjs.development.js","sources":["../src/utils.ts","../src/auth.ts","../src/types/transactions.ts","../src/transactions/index.ts","../src/ui.ts"],"sourcesContent":["export function getStacksProvider() {\n  return window.StacksProvider || window.BlockstackProvider;\n}\n\nexport function isStacksWalletInstalled() {\n  return !!getStacksProvider();\n}\n","import { AppConfig, UserSession } from '@stacks/auth';\nimport { decodeToken } from 'jsontokens';\nimport type { AuthOptions, AuthResponsePayload } from './types';\n\nimport { getStacksProvider } from './utils';\n\nexport const defaultAuthURL = 'https://app.blockstack.org';\n\nconst version = __VERSION__;\n\nif (typeof window !== 'undefined') {\n  window.__CONNECT_VERSION__ = version;\n}\n\nexport const isMobile = () => {\n  const ua = navigator.userAgent;\n  if (/android/i.test(ua)) {\n    return true;\n  }\n  if (/iPad|iPhone|iPod/.test(ua)) {\n    return true;\n  }\n  return /windows phone/i.test(ua);\n};\n\n/**\n * mobile should not use a 'popup' type of window.\n */\nexport const shouldUsePopup = () => {\n  return !isMobile();\n};\n\nexport const getOrCreateUserSession = (userSession?: UserSession): UserSession => {\n  if (!userSession) {\n    const appConfig = new AppConfig(['store_write'], document.location.href);\n    userSession = new UserSession({ appConfig });\n  }\n  return userSession;\n};\n\nexport const authenticate = async (authOptions: AuthOptions) => {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Unable to authenticate without Hiro Wallet extension');\n  }\n\n  const {\n    redirectTo = '/',\n    manifestPath,\n    onFinish,\n    onCancel,\n    sendToSignIn = false,\n    userSession: _userSession,\n    appDetails,\n  } = authOptions;\n  const userSession = getOrCreateUserSession(_userSession);\n  if (userSession.isUserSignedIn()) {\n    userSession.signUserOut();\n  }\n  const transitKey = userSession.generateAndStoreTransitKey();\n  const authRequest = userSession.makeAuthRequest(\n    transitKey,\n    `${document.location.origin}${redirectTo}`,\n    `${document.location.origin}${manifestPath}`,\n    userSession.appConfig.scopes,\n    undefined,\n    undefined,\n    {\n      sendToSignIn,\n      appDetails,\n      connectVersion: version,\n    }\n  );\n\n  try {\n    const authResponse = await provider.authenticationRequest(authRequest);\n    await userSession.handlePendingSignIn(authResponse);\n    const token = decodeToken(authResponse);\n    const payload = token?.payload;\n    const authResponsePayload = payload as unknown as AuthResponsePayload;\n    onFinish?.({\n      authResponse,\n      authResponsePayload,\n      userSession,\n    });\n  } catch (error) {\n    console.error('[Connect] Error during auth request', error);\n    onCancel?.();\n  }\n};\n\nexport const getUserData = async (userSession?: UserSession) => {\n  userSession = getOrCreateUserSession(userSession);\n  if (userSession.isUserSignedIn()) {\n    return userSession.loadUserData();\n  }\n  if (userSession.isSignInPending()) {\n    return userSession.handlePendingSignIn();\n  }\n  return null;\n};\n","import { UserSession } from '@stacks/auth';\nimport type { AuthOptions } from '../types/auth';\nimport {\n  PostConditionMode,\n  PostCondition,\n  AnchorMode,\n  ClarityValue,\n  StacksTransaction,\n} from '@stacks/transactions';\nimport { StacksNetwork } from '@stacks/network';\nimport BN from 'bn.js';\n\nexport interface TxBase {\n  appDetails?: AuthOptions['appDetails'];\n  postConditionMode?: PostConditionMode;\n  postConditions?: (string | PostCondition)[];\n  network?: StacksNetwork;\n  anchorMode?: AnchorMode;\n  attachment?: string;\n  fee?: number | string;\n  /**\n   * Provide the Hiro Wallet with a suggested account to sign this transaction with.\n   * This is set by default if a `userSession` option is provided.\n   */\n  stxAddress?: string;\n  /** @deprecated `unused - only included for compatibility with @stacks/transactions` */\n  senderKey?: string;\n  /** @deprecated `unused - only included for compatibility with @stacks/transactions` */\n  nonce?: number;\n}\n\nexport interface SponsoredFinishedTxPayload {\n  txRaw: string;\n}\n\nexport interface SponsoredFinishedTxData extends SponsoredFinishedTxPayload {\n  stacksTransaction: StacksTransaction;\n}\n\nexport interface FinishedTxPayload extends SponsoredFinishedTxPayload {\n  txId: string;\n}\n\nexport interface FinishedTxData extends FinishedTxPayload {\n  stacksTransaction: StacksTransaction;\n}\n\nexport enum TransactionTypes {\n  ContractCall = 'contract_call',\n  ContractDeploy = 'smart_contract',\n  STXTransfer = 'token_transfer',\n}\n\n/**\n * Contract Call\n */\n\nexport enum ContractCallArgumentType {\n  BUFFER = 'buffer',\n  UINT = 'uint',\n  INT = 'int',\n  PRINCIPAL = 'principal',\n  BOOL = 'bool',\n}\n\nexport interface ContractCallBase extends TxBase {\n  contractAddress: string;\n  contractName: string;\n  functionName: string;\n  functionArgs: (string | ClarityValue)[];\n}\n\nexport interface OptionsBase {\n  /**\n   * @deprecated Authentication is no longer supported through a hosted\n   * version. Users must install an extension.\n   */\n  authOrigin?: string;\n  userSession?: UserSession;\n}\n\nexport type SponsoredFinished = (data: SponsoredFinishedTxData) => void;\nexport type Finished = (data: FinishedTxData) => void;\nexport type Canceled = () => void;\n\nexport interface SponsoredOptionsBase extends TxBase, OptionsBase {\n  sponsored: true;\n  onFinish?: SponsoredFinished;\n  onCancel?: Canceled;\n}\n\nexport interface RegularOptionsBase extends TxBase, OptionsBase {\n  sponsored?: false;\n  onFinish?: Finished;\n  onCancel?: Canceled;\n}\n\nexport type ContractCallRegularOptions = ContractCallBase & RegularOptionsBase;\nexport type ContractCallSponsoredOptions = ContractCallBase & SponsoredOptionsBase;\nexport type ContractCallOptions = ContractCallRegularOptions | ContractCallSponsoredOptions;\n\nexport interface ContractCallArgument {\n  type: ContractCallArgumentType;\n  value: string;\n}\n\nexport interface ContractCallPayload extends ContractCallBase {\n  txType: TransactionTypes.ContractCall;\n  publicKey: string;\n  functionArgs: string[];\n  sponsored?: boolean;\n}\n\n/**\n * Contract Deploy\n */\nexport interface ContractDeployBase extends TxBase {\n  contractName: string;\n  codeBody: string;\n}\n\nexport type ContractDeployRegularOptions = ContractDeployBase & RegularOptionsBase;\nexport type ContractDeploySponsoredOptions = ContractDeployBase & SponsoredOptionsBase;\nexport type ContractDeployOptions = ContractDeployRegularOptions | ContractDeploySponsoredOptions;\n\nexport interface ContractDeployPayload extends ContractDeployBase {\n  publicKey: string;\n  txType: TransactionTypes.ContractDeploy;\n  sponsored?: boolean;\n}\n\n/**\n * STX Transfer\n */\n\nexport interface STXTransferBase extends TxBase {\n  recipient: string;\n  amount: BN | string;\n  memo?: string;\n}\n\nexport type STXTransferRegularOptions = STXTransferBase & RegularOptionsBase;\nexport type STXTransferSponsoredOptions = STXTransferBase & SponsoredOptionsBase;\nexport type STXTransferOptions = STXTransferRegularOptions | STXTransferSponsoredOptions;\n\nexport interface STXTransferPayload extends STXTransferBase {\n  publicKey: string;\n  txType: TransactionTypes.STXTransfer;\n  amount: string;\n  sponsored?: boolean;\n}\n\n/**\n * Transaction Popup\n */\n\nexport type TransactionOptions = ContractCallOptions | ContractDeployOptions | STXTransferOptions;\nexport type TransactionPayload = ContractCallPayload | ContractDeployPayload | STXTransferPayload;\n\nexport interface TransactionPopup {\n  token: string;\n  options: TransactionOptions;\n}\n","import { UserSession, AppConfig } from '@stacks/auth';\nimport { SECP256K1Client, TokenSigner } from 'jsontokens';\nimport {\n  ContractCallOptions,\n  ContractCallPayload,\n  ContractDeployOptions,\n  ContractDeployPayload,\n  TransactionPopup,\n  TransactionOptions,\n  STXTransferOptions,\n  STXTransferPayload,\n  TransactionPayload,\n  TransactionTypes,\n  STXTransferSponsoredOptions,\n  STXTransferRegularOptions,\n  ContractDeployRegularOptions,\n  ContractDeploySponsoredOptions,\n  ContractCallRegularOptions,\n  ContractCallSponsoredOptions,\n  SponsoredFinishedTxPayload,\n  FinishedTxPayload,\n} from '../types/transactions';\nimport {\n  serializeCV,\n  ChainID,\n  deserializeTransaction,\n  BufferReader,\n  serializePostCondition,\n  PostCondition,\n} from '@stacks/transactions';\nimport { getStacksProvider } from '../utils';\nimport { StacksTestnet } from '@stacks/network';\n\nconst getUserSession = (_userSession?: UserSession) => {\n  let userSession = _userSession;\n\n  if (!userSession) {\n    const appConfig = new AppConfig(['store_write'], document.location.href);\n    userSession = new UserSession({ appConfig });\n  }\n  return userSession;\n};\n\nconst getKeys = (_userSession?: UserSession) => {\n  const userSession = getUserSession(_userSession);\n  const privateKey = userSession.loadUserData().appPrivateKey;\n  const publicKey = SECP256K1Client.derivePublicKey(privateKey);\n\n  return { privateKey, publicKey };\n};\n\nfunction getStxAddress(options: TransactionOptions) {\n  const { stxAddress, userSession, network } = options;\n\n  if (stxAddress) return stxAddress;\n  if (!userSession || !network) return undefined;\n  const stxAddresses = userSession?.loadUserData().profile?.stxAddress;\n  const chainIdToKey = {\n    [ChainID.Mainnet]: 'mainnet',\n    [ChainID.Testnet]: 'testnet',\n  };\n  const address: string | undefined = stxAddresses?.[chainIdToKey[network.chainId]];\n  return address;\n}\n\nfunction getDefaults(options: TransactionOptions) {\n  const network = options.network || new StacksTestnet();\n  const userSession = getUserSession(options.userSession);\n  const defaults: TransactionOptions = {\n    ...options,\n    network,\n    userSession,\n  };\n  return {\n    stxAddress: getStxAddress(defaults),\n    ...defaults,\n  };\n}\n\nconst signPayload = async (payload: TransactionPayload, privateKey: string) => {\n  let { postConditions } = payload;\n  if (postConditions && typeof postConditions[0] !== 'string') {\n    postConditions = (postConditions as PostCondition[]).map(pc =>\n      serializePostCondition(pc).toString('hex')\n    );\n  }\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  return tokenSigner.signAsync({\n    ...payload,\n    postConditions,\n  } as any);\n};\n\nconst openTransactionPopup = async ({ token, options }: TransactionPopup) => {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Hiro Wallet not installed.');\n  }\n\n  try {\n    const txResponse = await provider.transactionRequest(token);\n    const { txRaw } = txResponse;\n    const txBuffer = Buffer.from(txRaw.replace(/^0x/, ''), 'hex');\n    const stacksTransaction = deserializeTransaction(new BufferReader(txBuffer));\n\n    if ('sponsored' in options && options.sponsored) {\n      options.onFinish?.({\n        ...(txResponse as SponsoredFinishedTxPayload),\n        stacksTransaction,\n      });\n      return;\n    }\n    options.onFinish?.({\n      ...(txResponse as FinishedTxPayload),\n      stacksTransaction,\n    });\n  } catch (error) {\n    console.error('[Connect] Error during transaction request', error);\n    options.onCancel?.();\n  }\n};\n\nexport const makeContractCallToken = async (options: ContractCallOptions) => {\n  const { functionArgs, appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const args: string[] = functionArgs.map(arg => {\n    if (typeof arg === 'string') {\n      return arg;\n    }\n    return serializeCV(arg).toString('hex');\n  });\n\n  const payload: ContractCallPayload = {\n    ..._options,\n    functionArgs: args,\n    txType: TransactionTypes.ContractCall,\n    publicKey,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nexport const makeContractDeployToken = async (options: ContractDeployOptions) => {\n  const { appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const payload: ContractDeployPayload = {\n    ..._options,\n    publicKey,\n    txType: TransactionTypes.ContractDeploy,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nexport const makeSTXTransferToken = async (options: STXTransferOptions) => {\n  const { amount, appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const payload: STXTransferPayload = {\n    ..._options,\n    amount: amount.toString(10),\n    publicKey,\n    txType: TransactionTypes.STXTransfer,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nasync function generateTokenAndOpenPopup<T extends TransactionOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>\n) {\n  const token = await makeTokenFn({\n    ...getDefaults(options),\n    ...options,\n  } as T);\n  return openTransactionPopup({ token, options });\n}\n\nexport function openContractCall(options: ContractCallRegularOptions): Promise<void>;\nexport function openContractCall(options: ContractCallSponsoredOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions) {\n  return generateTokenAndOpenPopup(options, makeContractCallToken);\n}\n\nexport function openContractDeploy(options: ContractDeployRegularOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeploySponsoredOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions) {\n  return generateTokenAndOpenPopup(options, makeContractDeployToken);\n}\n\nexport function openSTXTransfer(options: STXTransferRegularOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferSponsoredOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions) {\n  return generateTokenAndOpenPopup(options, makeSTXTransferToken);\n}\n","import { authenticate } from './auth';\nimport type { AuthOptions } from './types/auth';\nimport { defineCustomElements } from '@stacks/connect-ui/loader';\nimport { getStacksProvider } from './utils';\n\nexport const showConnect = (authOptions: AuthOptions) => {\n  if (getStacksProvider()) {\n    void authenticate(authOptions);\n    return;\n  }\n  if (typeof window !== undefined) {\n    void defineCustomElements(window);\n    const element = document.createElement('connect-modal');\n    element.authOptions = authOptions;\n    document.body.appendChild(element);\n    const handleEsc = (ev: KeyboardEvent) => {\n      if (ev.key === 'Escape') {\n        document.removeEventListener('keydown', handleEsc);\n        element.remove();\n      }\n    };\n    document.addEventListener('keydown', handleEsc);\n  }\n};\n\n/**\n * @deprecated Use the renamed `showConnect` method\n */\nexport const showBlockstackConnect = (authOptions: AuthOptions) => showConnect(authOptions);\n"],"names":["window","StacksProvider","BlockstackProvider","getStacksProvider","defaultAuthURL","version","__VERSION__","__CONNECT_VERSION__","isMobile","ua","navigator","userAgent","test","shouldUsePopup","getOrCreateUserSession","userSession","appConfig","AppConfig","document","location","href","UserSession","authenticate","authOptions","provider","Error","redirectTo","manifestPath","onFinish","onCancel","sendToSignIn","_userSession","appDetails","isUserSignedIn","signUserOut","transitKey","generateAndStoreTransitKey","authRequest","makeAuthRequest","origin","scopes","connectVersion","authenticationRequest","authResponse","handlePendingSignIn","token","decodeToken","payload","authResponsePayload","error","getUserData","loadUserData","isSignInPending","TransactionTypes2","TransactionTypes","ContractCallArgumentType2","ContractCallArgumentType","getUserSession","getKeys","privateKey","appPrivateKey","publicKey","SECP256K1Client","derivePublicKey","options","stxAddress","network","stxAddresses","profile","chainIdToKey","ChainID","Mainnet","Testnet","address","chainId","StacksTestnet","defaults","getStxAddress","signPayload","postConditions","map","serializePostCondition","pc","toString","tokenSigner","TokenSigner","signAsync","openTransactionPopup","transactionRequest","txResponse","txRaw","txBuffer","Buffer","from","replace","stacksTransaction","deserializeTransaction","BufferReader","sponsored","makeContractCallToken","functionArgs","_options","args","arg","serializeCV","txType","ContractCall","makeContractDeployToken","ContractDeploy","makeSTXTransferToken","amount","STXTransfer","makeTokenFn","getDefaults","generateTokenAndOpenPopup","showConnect","defineCustomElements","element","createElement","body","appendChild","handleEsc","ev","key","removeEventListener","remove","addEventListener","showBlockstackConnect"],"mappings":"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"}